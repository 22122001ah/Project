package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Directors;
import ba.unsa.etf.rpr.domain.Plays;
import ba.unsa.etf.rpr.domain.Writers;
import ba.unsa.etf.rpr.exceptions.PlaysException;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PlaysManager {
    public List<Plays> getAll() throws PlaysException {
        return DaoFactory.playsDao().getAll();
    }

    public List<Plays> searchByPrice(int price) throws PlaysException {
        return DaoFactory.playsDao().searchByPrice(price);
    }
    public Plays getById(int Id) throws PlaysException{
        return DaoFactory.playsDao().getById(Id);
    }
    public boolean isInDB(List<Plays> plays) throws PlaysException{
        return DaoFactory.playsDao().isInDB(plays);
    }
    public List<Plays> searchByPrices(int price1,int price2) throws PlaysException{
        return DaoFactory.playsDao().searchByPrices(price1,price2);
    }
    public List<Plays> searchByWriter(Writers writer) throws PlaysException{
        return DaoFactory.playsDao().searchByWriter(writer);
    }
    public List<Plays> searchByDirector(Directors director)throws PlaysException {
        List<Plays> p= DaoFactory.playsDao().searchByDirector(director);
        if(p.size()==0)
            throw new PlaysException("There is no director with that name in out DB");
        return p;
    }
    public List<Plays> searchByDate(Date date) throws PlaysException {
        return DaoFactory.playsDao().searchByDate(date);
    }
    public List<Plays> searchByPlayName(String play_name)throws PlaysException {
        ArrayList<Plays>P= (ArrayList<Plays>) DaoFactory.playsDao().searchByPlayName(play_name);
    if(P.size()==0) {
        throw new PlaysException("No such play");
    }
    return P;
    }
    public List<String>getAllGenres() throws PlaysException {
        return DaoFactory.playsDao().getAllGenres();
    }
    public List<Plays> searchByGenre(String genre) throws PlaysException {
        return DaoFactory.playsDao().searchByGenre(genre);
    }

    public Plays update(Plays q) throws PlaysException {
        return   DaoFactory.playsDao().update(q);
    }

    public Plays add(Plays q) throws PlaysException {
        if(q.getId()!=0)
            throw new PlaysException("Can't add category with ID. ID is autogenerated");
        return DaoFactory.playsDao().add(q);
    }
    public void delete(int id) throws PlaysException {
        DaoFactory.playsDao().delete(id);
    }
    public Plays randomPlay() throws PlaysException{
        return DaoFactory.playsDao().randomPlay();
    }

    public List<Plays> searchByPlaynameandPriceandGenre(String text, int parseInt, String value) throws PlaysException {
        return DaoFactory.playsDao().searchByPlaynameandPriceandGenre(text,parseInt,value);
    }
    public List<Plays> searchByPlaynameandGenre(String play_name,String genre) throws PlaysException{
        return DaoFactory.playsDao().searchByPlaynameandGenre(play_name,genre);
    }
    public List<Plays> searchByPlaynameandPrice(String play_name,int price) throws PlaysException{
        return DaoFactory.playsDao().searchByPlaynameandPrice(play_name,price);
    }
}
