package ba.unsa.etf.rpr;

import ba.unsa.etf.rpr.business.PlaysManager;
import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.dao.PlaysDaoSQLimpl;
import ba.unsa.etf.rpr.domain.Plays;
import ba.unsa.etf.rpr.exceptions.PlaysException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.when;

public class ManagerTest {
    private PlaysManager categoryManager;
    private Plays category;
    private PlaysDaoSQLimpl categoryDaoSQLMock;
    private List<Plays> categories;

    /**
     * This method will be called before each test method
     */
    @BeforeEach
    public void initializeObjectsWeNeed() throws PlaysException {
        categoryManager = Mockito.mock(PlaysManager.class);
        category = new Plays();
        category.setPlay_name("Poslovice");
        category.setId(50);

        categoryDaoSQLMock = Mockito.mock(PlaysDaoSQLimpl.class);
        categories = new ArrayList<>();
        categories.addAll(Arrays.asList(new Plays("Poslovice"), new Plays("Citati"), new Plays("Motivation"), new Plays("Sthihovi")));
    }



    /**
     * Adding category that already exists
     * @throws PlaysException
     */
    @Test
    void add() throws PlaysException {
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::playsDao).thenReturn(categoryDaoSQLMock);
        /*
        An exception will be thrown because our instance of Category.java class has value for id
         */
        when(DaoFactory.playsDao().getAll()).thenReturn(categories);
        Mockito.doCallRealMethod().when(categoryManager).add(category);
        PlaysException quoteException = Assertions.assertThrows(PlaysException.class, () -> {
            categoryManager.add(category);}, "Can't add category with ID. ID is autogenerated");

        Assertions.assertEquals("Can't add category with ID. ID is autogenerated", quoteException.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::playsDao);
        Mockito.verify(categoryManager).add(category);
        daoFactoryMockedStatic.close();
    }

    /**
     * Adding a new category
     * @throws PlaysException
     */
    @Test
    void addNewCategory() throws PlaysException {
        Plays newCategory = new Plays("Nova kategorija");
        categoryManager.add(newCategory);

        Assertions.assertTrue(true);
        Mockito.verify(categoryManager).add(newCategory);
    }
}
